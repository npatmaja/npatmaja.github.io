<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>nauval atmaja</title>
    <link href="http://nauvalatmaja.com/feed.xml" rel="self"/>
    <link href="http://nauvalatmaja.com"/>
    <updated>2015-04-09T00:22:11.936Z</updated>
    <id>http://nauvalatmaja.com</id>
    <author>
        <name>Nauval Atmaja</name>
        <email>nauval.atmaja@gmail.com</email>
    </author>

    
    <entry>
        <title>Ways to Boost Coding Productivity</title>
        <link href="http://nauvalatmaja.com/2015/04/09/ways-to-boost-coding-productivity/"/>
        <updated>2015-04-09T00:18:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2015-04-09,/2015/04/09/ways-to-boost-coding-productivity/</id>
        <content type="html"><![CDATA[<p>As a someone who codes frequently, in daily basis in fact, I need an
environment that is able to boost my productivity when coding. Some 
might argue that one could be productive in every given environment.
That is the ideal case, however live is not. Hence, productivity
tools and workflows are created.</p>
<p>During my coding adventure, I found some <em>ways</em> that help me
to boost up my productivity, which are listed below.</p>
<h1 id="use-nix-platform">Use *nix platform</h1>
<p>It come across to me that I use shell (terminal) a lot when writing a program,
e.g., navigating through directories, executing commands, committing
to local and remote repositories etc. In that regards,
no better OS to provide that other than *nix (either OS X or linux).
Moreover, they are more stable, more secure and easier to configure rather
than Windows. The last part is a bit bias as I have not been using 
Windows for several years now, maybe in the latest release Windows
are more configurable than the previous versions. Well, I&#39;m a pragmatic 
person, I use what works for me. </p>
<h1 id="use-your-most-comfortable-editor">Use your most comfortable editor</h1>
<p>I use <a href="http://www.sublimetext.com/3"><em>Sublime Text 3</em></a> to code mostly
everything, except Java (I&#39;m still using Eclipse for that). 
<em>Sublime Text</em> is a powerful yet easy to use
text editor that provides a lot of functionalities. Moreover, it
has myriad of plugins to make developer&#39;s life easier and tons of 
themes please the eyes, which is also a very important thing (to
me at the very least). If you miss
the efficient vim key bindings, use <a href="https://github.com/guillermooo/Vintageous">vintageaus</a>
to emulate vim key bindings inside <em>Sublime Text</em>.
<!-- Read more --> </p>
<h1 id="change-to-zsh">Change to zsh</h1>
<p>See 
<a href="http://www.slideshare.net/jaguardesignstudio/why-zsh-is-cooler-than-your-shell-16194692">Brendon Repp&#39;s presentation</a> 
on why to <a href="http://www.zsh.org/">zsh</a>. I use <a href="http://ohmyz.sh/">oh-my-zsh</a> to manage the zsh
configuration and all. To sugar its visual, I use the 
<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster">agnoster</a> theme. Besides, 
the theme directly tells me in what git branch I&#39;m currently working on in an awesome way.
Hence no need to type <code>git status</code> to see the working branch. Combined with the right git
aliases, it feels like home when coding.</p>
<h1 id="add-aliases-your-shell">Add aliases your shell</h1>
<p>Having short aliases is always a good thing to reduce finger movements when typing in
a terminal regardless of what shell you are using. One of useful alias is 
aliases to go the the frequently
visited directoris. So, instead of typing <code>cd ~/codes/learning/nodejs</code> it&#39;s simpler
to just type <code>learn-nodejs</code> right?!</p>
<h1 id="adopt-github-flow-and-the-supporting-git-aliases">Adopt GitHub Flow and the supporting git aliases</h1>
<p>I have been using <a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow</a>
for sometime in my recent projects and find it
is a really straight forward approach in managing the development-deployment
workflow when using git. Adding the 
<a href="http://haacked.com/archive/2014/07/28/github-flow-aliases/">GitHub flow aliases</a>
to your <code>~/.gitconfig</code> will be even more fun. Here&#39;s
<a href="https://gist.github.com/npatmaja/d72daeb2ec0f21f1af2a">my <code>.gitconfig</code>&#39;s aliases section</a>
that has some additional aliases beside the GitHub flow aliases.</p>
<h1 id="have-a-to-do-list">Have a To-do list</h1>
<p>A to-do list is a really powerful tool to manage and prioritize your tasks. Sometimes
it is taken for granted but it does help to keep the focus on the tasks that
should be done, especially for an easily distracted person (just like myself). 
No need for fancy tools to create a to-do list, any text editor will do. However,
<a href="https://evernote.com/">Evernote</a> or OS X&#39;s Notes or other to-do list apps
will be better choice.</p>
<p>I don&#39;t claim the list above is the best way to increase your coding productivity
but it works for me and my current working environment. The list is not and will
never be the final one because achieving better productivity is a long live 
adventure.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Upload Files with Backbone.js, Node.js and express 4.x</title>
        <link href="http://nauvalatmaja.com/2015/01/30/upload-files-with-backbone-nodejs-express-4/"/>
        <updated>2015-01-30T06:00:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2015-01-30,/2015/01/30/upload-files-with-backbone-nodejs-express-4/</id>
        <content type="html"><![CDATA[<p><a href="https://github.com/addyosmani/backbone-fundamentals">Backbone fundamentals</a>
is a great <em>free</em> resource to learn Backbone.js from scratch. The book was written by 
<a href="http://addyosmani.com/">Addy Osmany</a> under <a href="https://en.wikipedia.org/wiki/Creative_Commons_license">creative-commons license</a>.
As its second exercise, the book guide the readers to create a simple library application
that uses Node.js as the back-end. However, it left the part to upload book&#39;s cover
to the readers as an exercise. Hence, here is the way I did it.</p>
<h1 id="requirement">Requirement</h1>
<p>There are two additional requirements for the upload book&#39;s cover features:</p>
<ul>
<li><p>The selected cover should be previewed as thumbnail</p>
<p>This implies that there should be a space to show the selected
image. When users change the image, the preview should change 
accordingly.</p>
</li>
<li><p>Upload process shall happen only when a new book is added</p>
<p>The upload happens if and only if when users click the button
to add a new book. This signifies that the displaying the cover&#39;s
preview should not upload to image file to the server.</p>
</li>
</ul>
<!-- Read more -->

<h1 id="problems">Problems</h1>
<p>After browsing for awhile, I found <a href="http://markdawson.tumblr.com/post/18359176420/asynchronous-file-uploading-using-express-and">a blog post to upload file asynchronously using Node.js and express</a>, which was good
as a starting point. However, similar to most of online references I had found, 
they were pretty much obsolete; most of them were using express &lt;= 3.x that supported file upload
by using <code>body-parse</code> middleware (as mentioned in the blog post) where in express
4.x the <code>body-parse</code> middleware did not support file upload any longer.</p>
<p>Another problem was to address the requirement: previewing images without
upload them to the server in the first place. This was tricky, as most of the 
solutions were to have the images uploaded first then fetch the images&#39; URL 
to be previewed.</p>
<h1 id="solution">Solution</h1>
<p>I had to admit, the first problem is another RTFM problem. So when I read again
<a href="https://github.com/expressjs/body-parser"><code>body-parser</code>&#39;s documentation</a> it was
written clearly that <code>body-parse</code> did not handle multipart bodies (file uploads).
Furthermore, it mentioned the alternatives modules to handle multipart bodies, and
one of them is <a href="https://www.npmjs.com/package/multer#readme">multer</a>.</p>
<p>Just like another express middleware, I needed to tell express to use multer and
specified to which directory the files will be uploaded as shown in the following
coffeescript code (yes, I wrote the back-end using coffeescript).</p>
<pre class="highlight"><code class="hljs coffeescript">express = <span class="hljs-built_in">require</span> <span class="hljs-string">'express'</span>
multer = <span class="hljs-built_in">require</span> <span class="hljs-string">'multer'</span>

app = express()
app.use multer( { <span class="hljs-attribute">dest</span>: <span class="hljs-string">"<span class="hljs-subst">#{__root}</span>/public/img/covers/"</span> } )
</code></pre>
<p>For the second problem, I found out that javascript provides a 
<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader"><code>FileReader</code> object whose capable of reading file from client&#39;s machine</a>, 
<a href="https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications#Example.3A_Showing_thumbnails_of_user-selected_images">which could be used to load a selected image from a browser locally</a>.</p>
<p>The following code is a Backbone view to handle the feature to display the selected image.
The main idea is to catch the <code>change</code> event from an <code>&lt;input type=&quot;file&quot;&gt;</code> and read the file
and render it through the designated <code>&lt;img&gt;</code> element and later on to upload the file as well.</p>
<pre class="highlight"><code class="hljs javascript">app.ThumbnailView = Backbone.View.extend({
  events: {
    <span class="hljs-string">'change #coverImageUpload'</span>: <span class="hljs-string">'renderThumb'</span>,
    <span class="hljs-string">'submit #uploadCoverForm'</span>: <span class="hljs-string">'upload'</span>
  },

  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.renderThumb();
  },

  renderThumb: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">var</span> input = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#coverImageUpload'</span>);
    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#uploadedImage'</span>)[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">if</span>(input.val() !== <span class="hljs-string">''</span>) {
      <span class="hljs-keyword">var</span> selected_file = input[<span class="hljs-number">0</span>].files[<span class="hljs-number">0</span>];
      <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> FileReader();
      reader.onload = (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(aImg)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span> </span>{ aImg.src = e.target.result; }; })(img);
      reader.readAsDataURL(selected_file);
    }
  },

  submit: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.$form = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#uploadCoverForm'</span>);
    <span class="hljs-keyword">this</span>.$form.submit();
  },

  upload: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>;
    <span class="hljs-keyword">this</span>.$form.ajaxSubmit({
      error: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(xhr)</span> </span>{
        _this.renderStatus(<span class="hljs-string">'Error: '</span> + xhr.status);
      },
      success: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(response)</span> </span>{
        _this.trigger(<span class="hljs-string">'image-uploaded'</span>, response.path);
        _this.clearField();
      }
    });
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
  },

  renderStatus: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(status)</span> </span>{
     $(<span class="hljs-string">'#status'</span>).text(status);
  },

  clearField: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#uploadedImage'</span>)[<span class="hljs-number">0</span>].src = <span class="hljs-string">''</span>;
    <span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#coverImageUpload'</span>).val(<span class="hljs-string">''</span>);
  }
});
</code></pre><p>In details, when a user has selected a cover image, the <code>&#39;change #coverImageUpload&#39;: &#39;renderThumb&#39;</code> 
event will be triggered. To add a bit context, <code>#coverImageUpload</code> is the id of the <code>&lt;input type=&quot;file&quot;&gt;</code>
to upload a file and <code>renderThumb</code> is the function will be executed as the event&#39;s callback. In the
function, whenever a user selected a picture, the view will get the selected file and read the file
as data URL through <code>FileReader.readAsDataURL</code> function. When the particular function is executed,
it triggers <code>FileReader</code>&#39;s <code>onload</code> event with the result of the data reading process as its callback&#39;s
parameter, which is used as the image source of the <code>&lt;img&gt;</code> element as shown in the listing above.</p>
<p>The uploading part was a bit tricky. I used Backbone View&#39;s event to make sure
that the newly added book has the right cover image. The way to do this is to
make sure when a user clicks the <strong>add book button</strong>, the cover image
will be uploaded first and when the the upload success an event will be 
triggered with the server path of the uploaded image as the parameter. Then the path will 
be used as the value of <code>&lt;input&gt;</code> related to the book cover. The last step
is to create the book object in the Backbone Collection, which will be 
sync&#39;d to the Node.js back-end server. The following sequence diagram 
pictures the description above.</p>
<div class="mermaid">
sequenceDiagram
  User->>LibraryView: click add book button
  LibraryView->>ThumbnailView: upload
  ThumbnailView->>ThumbnailView: trigger('uploaded', response.path)
  opt uploaded event
    LibraryView->>LibraryView: updateInput
    LibraryView->>LibraryView: createData
  end
</div>
<p>To enable the event in the <code>LibraryView</code>, the object needs to listen to
to the <code>ThumbnailView</code>.</p>
<pre class="highlight"><code class="hljs actionscript">app.LibraryView = Backbone.View.extend({
  ...

  initialize: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(initialBooks)</span> </span>{
    <span class="hljs-keyword">this</span>.collection = <span class="hljs-keyword">new</span> app.Library(initialBooks);

    <span class="hljs-keyword">this</span>.thumbnailView = <span class="hljs-keyword">new</span> app.ThumbnailView();
    <span class="hljs-keyword">this</span>.bookListView = <span class="hljs-keyword">new</span> app.BookListView( { collection: <span class="hljs-keyword">this</span>.collection } );

    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.thumbnailView, <span class="hljs-string">'image-uploaded'</span>, <span class="hljs-keyword">this</span>.updateInput);
  }
}
</code></pre><p>And that&#39;s all folks! I hope this tutorial could be a help for someone who looks for the solution
for the exercise. Please see the <a href="https://github.com/npatmaja/library">project&#39;s repository</a> 
for the complete solution.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Rendering Mermaid in Docpad</title>
        <link href="http://nauvalatmaja.com/2015/01/13/rendering-mermaid-in-docpad/"/>
        <updated>2015-01-13T03:23:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2015-01-13,/2015/01/13/rendering-mermaid-in-docpad/</id>
        <content type="html"><![CDATA[<p>I stumbled across <a href="http://knsv.github.io/mermaid/">Mermaid</a> when I saw 
<a href="https://twitter.com/nikmd23/status/553224624130228225">@ronaldwidha retweeted a tweet about it</a>. 
Mermaid is a library for <em>writing</em> diagrams instead of draw 
them similar to <a href="https://github.com/chjj/marked">Marked</a>
to markdown, awesome! So, I thought I could use this in my blog just in case I 
need to draw some flowcharts or sequence diagrams in the future.</p>
<p>DocPad uses Marked to render markdown to html via 
<a href="https://github.com/docpad/docpad-plugin-marked">docpad-plugin-marked</a> 
but natively, it doesn&#39;t support 
Mermaid syntax. Fortunately, Marked provide 
<a href="https://github.com/chjj/marked#overriding-renderer-methods">a way to override its renderer</a>,
however, it is not yet supported in the current release of the docpad-plugin-marked,
and <a href="https://github.com/docpad/docpad-plugin-marked/issues/11">someone created a ticket on this issue</a>. 
So based on the 
explanation there, I forked the plugin and started to hack it down. 
To add the functionality itself was not that hard but to define a proper test
for the plugin was tougher than it looks, at least at first as I didn&#39;t quite 
understand how DocPad&#39;s plugin tester works. Thanks to <a href="http://www.delarre.net/posts/unit-testing-docpad-plugins/">this awesome post</a>, 
I could finally write and pass the test. The working version of my fork
can be found <a href="https://github.com/npatmaja/docpad-plugin-marked">at my GitHub</a>.</p>
<!-- Read more -->

<p>To use the forked plugin, change the dependency definition in <code>package.json</code>:</p>
<pre class="highlight"><code class="hljs undefined">"docpad-plugin-marked": "git+ssh://git@github.com:npatmaja/docpad-plugin-marked.git"
</code></pre>
<p>Next is to redefine the <code>code</code> renderer by putting the definition in the <code>docpad.coffee</code></p>
<pre class="highlight"><code class="hljs coffeescript"><span class="hljs-attribute">plugins</span>:
  <span class="hljs-attribute">marked</span>:
    <span class="hljs-attribute">markedRenderer</span>:
      <span class="hljs-attribute">code</span>: <span class="hljs-function"><span class="hljs-params">(code, lang)</span> -&gt;</span>
<span class="hljs-function">        <span class="hljs-title">escape</span> = <span class="hljs-params">(html, encode)</span> -&gt;</span>
          pattern = <span class="hljs-keyword">if</span> !encode <span class="hljs-keyword">then</span> <span class="hljs-regexp">/&amp;(?!#?\w+;)/g</span>  <span class="hljs-keyword">else</span> <span class="hljs-regexp">/&amp;/g</span>
          <span class="hljs-keyword">return</span> html
            .replace(pattern, <span class="hljs-string">'&amp;amp;'</span>)
            .replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">'&amp;lt;'</span>)
            .replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">'&amp;gt;'</span>)
            .replace(<span class="hljs-regexp">/"/g</span>, <span class="hljs-string">'&amp;quot;'</span>)
            .replace(<span class="hljs-regexp">/'/g</span>, <span class="hljs-string">'&amp;#39;'</span>)

        <span class="hljs-keyword">if</span> code.match(<span class="hljs-regexp">/^sequenceDiagram/</span>)|| code.match(<span class="hljs-regexp">/^graph/</span>)
          <span class="hljs-keyword">return</span> <span class="hljs-string">"&lt;div class=\"mermaid\"&gt;\n<span class="hljs-subst">#{code}</span>\n&lt;/div&gt;\n"</span>
        <span class="hljs-keyword">else</span>
          <span class="hljs-keyword">if</span> <span class="hljs-property">@options</span>.highlight
            out = <span class="hljs-property">@options</span>.highlight code, lang
            <span class="hljs-keyword">if</span> out != <span class="hljs-literal">null</span> &amp;&amp; out != code
              escaped = <span class="hljs-literal">true</span>
              code = out

          <span class="hljs-keyword">if</span> !lang
            <span class="hljs-keyword">return</span> <span class="hljs-string">'&lt;pre&gt;&lt;code&gt;'</span> +
              (<span class="hljs-keyword">if</span> escaped <span class="hljs-keyword">then</span> code <span class="hljs-keyword">else</span> escape(code, <span class="hljs-literal">true</span>)) +
              <span class="hljs-string">'\n&lt;/code&gt;&lt;/pre&gt;'</span>

          <span class="hljs-keyword">return</span> <span class="hljs-string">'&lt;pre&gt;&lt;code class="'</span> +
            <span class="hljs-keyword">this</span>.options.langPrefix +
            escape(lang, <span class="hljs-literal">true</span>) +
            <span class="hljs-string">'"&gt;'</span> +
            (<span class="hljs-keyword">if</span> escaped <span class="hljs-keyword">then</span> code <span class="hljs-keyword">else</span> escape(code, <span class="hljs-literal">true</span>)) +
            <span class="hljs-string">'\n&lt;/code&gt;&lt;/pre&gt;\n'</span>
</code></pre><p>Lastly, I added Mermaid.js to blog&#39;s layout as mentioned on Mermaid&#39;s
documentation. Now all are set to their place, so whenever I put Mermaid 
syntax in a markdown&#39;s code block <code>```</code> the code will 
be transformed to svg image. </p>
<p>Without further ado, below are a couple of examples of Mermaid diagram
definition and their respective rendered diagram. It&#39;s show time!</p>
<h1 id="simple-graph">Simple graph</h1>
<pre class="highlight"><code class="hljs livecodeserver">%% remove comment <span class="hljs-built_in">to</span> render <span class="hljs-operator">the</span> graph
graph TB 
  subgraph <span class="hljs-constant">one</span> 
    a1<span class="hljs-comment">--&gt;a2</span>
  <span class="hljs-function"><span class="hljs-keyword">end</span></span>
  subgraph <span class="hljs-constant">two</span>
    b1<span class="hljs-comment">--&gt;b2</span>
  <span class="hljs-function"><span class="hljs-keyword">end</span></span>
  subgraph <span class="hljs-constant">three</span>
    c1<span class="hljs-comment">--&gt;c2</span>
  <span class="hljs-function"><span class="hljs-keyword">end</span></span>
  c1<span class="hljs-comment">--&gt;a2</span>
</code></pre><div class="mermaid">
graph TB 
  subgraph one 
    a1-->a2
  end
  subgraph two
    b1-->b2
  end
  subgraph three
    c1-->c2
  end
  c1-->a2
</div>
<h1 id="sequence-diagram">Sequence diagram</h1>
<pre class="highlight"><code class="hljs livecodeserver">%% remove comment <span class="hljs-built_in">to</span> render <span class="hljs-operator">the</span> diagram
sequenceDiagram
  Alice -&gt;&gt; Bob: Hello Bob, how are you?
  Bob<span class="hljs-comment">--&gt;&gt;John: How about you John?</span>
  Bob<span class="hljs-comment">--x Alice: I am good thanks!</span>
  Bob-x John: I am good thanks!
  Note <span class="hljs-constant">right</span> <span class="hljs-operator">of</span> John: Bob thinks <span class="hljs-operator">a</span> <span class="hljs-keyword">long</span>&lt;br/&gt;<span class="hljs-keyword">long</span> <span class="hljs-built_in">time</span>, so <span class="hljs-keyword">long</span>&lt;br/&gt;that <span class="hljs-operator">the</span> <span class="hljs-keyword">text</span> does&lt;br/&gt;<span class="hljs-operator">not</span> fit <span class="hljs-command"><span class="hljs-keyword">on</span> <span class="hljs-title">a</span> <span class="hljs-title">row</span>.</span>

  Bob<span class="hljs-comment">--&gt;Alice: Checking with John...</span>
  Alice-&gt;John: Yes... John, how are you?
</code></pre><div class="mermaid">
sequenceDiagram
  Alice ->> Bob: Hello Bob, how are you?
  Bob-->>John: How about you John?
  Bob--x Alice: I am good thanks!
  Bob-x John: I am good thanks!
  Note right of John: Bob thinks a long<br>long time, so long<br>that the text does<br>not fit on a row.

  Bob-->Alice: Checking with John...
  Alice->John: Yes... John, how are you?
</div>
<h2 id="side-note">Side note</h2>
<p>The CSS I use to style the diagram can be seen <a href="https://raw.githubusercontent.com/npatmaja/nauvalatmaja.com/master/src/render/styles/mermaid.less">here</a>. Happy diagramming!</p>
]]></content>
    </entry>
    
    <entry>
        <title>Android Development with Genymotion</title>
        <link href="http://nauvalatmaja.com/2015/01/08/Android-development-with-Genymotion/"/>
        <updated>2015-01-08T03:23:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2015-01-08,/2015/01/08/Android-development-with-Genymotion/</id>
        <content type="html"><![CDATA[<p>I am a noob in android development and one thing I am not
comfortable with is the stock android device emulator.
The default emulator is really slow, the boot-up process could
take minutes in my machine (I won&#39;t say my machine is fast either,
but it is sufficient), the app deployment takes too much time, 
moreover, the interaction is sluggish. Hence, it is a no go.</p>
<p>Up to now, I used my own android phone to test my app. It is fast,
quite responsive, but the downside is I need to connect my phone
to my laptop when I work on the app. Not to mention when I can&#39;t find
my USB cable, disaster. </p>
<p><img src="http://nauvalatmaja.com/images/genymotion.png" alt="Genymotion in action"></p>
<!-- Read more -->

<p>Fortunately, there is an alternative to android 
stock emulator called <a href="https://www.genymotion.com">Genymotion</a>. It runs
on top of <a href="https://www.virtualbox.org">VirtualBox</a>, in other words, each android
virtual device is an virtual machine in VirtualBox. To use Genymotion
I have to register in the first place (the free account is sufficient for me) 
and then <a href="https://www.genymotion.com/#!/developers/user-guide#installing-genymotion">downloaded and installed the application</a>. 
Following that, I created a virtual device of my liking
in the Genymotion application. 
As I use Eclipse Android Development Tools, I then installed 
<a href="http://marketplace.eclipse.org/content/genymotion-plugin-eclipse">eclipse plugin for Genymotion</a>. A plugin for 
Android Studio is also available in the Genymotion&#39;s website. Restarted Eclipse and 
all was ready. A note, you need to install VirtualBox to use Genymotion, 
otherwise it will complain about can not starting virtualization or 
something.</p>
<p>At first I was skeptical about this emulator but it turn out to be the
opposite. It runs flawlessly, it boots up very fast and very responsive, and at some
point it is even faster than my phone. More importantly, it consumes considerably less
CPU resources compared to the default emulator, impressive. In the conclusion, I recommend
this emulator for android development over the stock emulator. If you need to access
more features other than camera and GPS, you can always change to the subscribe
version.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Setting Up Custom Domain for GitHub Pages</title>
        <link href="http://nauvalatmaja.com/2014/12/31/setting-up-custom-domain-for-github-pages/"/>
        <updated>2014-12-31T03:23:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2014-12-31,/2014/12/31/setting-up-custom-domain-for-github-pages/</id>
        <content type="html"><![CDATA[<p>It has been a couple days since <a href="http://nauvalatmaja.com/">nauvalatmaja.com</a> is online,
and to be honest the process was not as hard as I had imagined. Kudos to 
<a href="http://davidensinger.com/">David Ensinger</a> who has written in details on 
how he <a href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/">set up his custom domain for his GitHub pages</a> and
<a href="http://davidensinger.com/2014/04/transferring-the-dns-from-namecheap-to-cloudflare-for-github-pages/">tweak it to get faster by using cloudflare</a>. All
the needed information to do this can be found there.</p>
<p>I purchased this this domain name at <a href="https://www.namecheap.com/">NameCheap</a>, as suggested by David&#39;s post,
with just a bit more than five bucks for a year. Then, I used the free plan of <a href="https://cloudflare.com">CloudFlare</a>
for the DNSs, which I think it is sufficient for my need, and set up the DNS records using <code>CNAME</code>
on the CloudFlare panel to point to my GitHub Pages address. Lastly,
<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/">I add a <code>CNAME</code> file in the root directory of my GitHub Pages repository to redirect it</a>. 
And that&#39;s it, practically the process is done after you transfer the DNS from NameCheap to
CloudFlare, you may need to wait for a while to make the changes take effect.</p>
<p>It took me less than three hours, more or less, to make my custom domain
accessible. Frankly, I spent more hours thinking the custom domain name I 
should use than did the actual setup. I am quite happy with the 
setup, hosting static pages on GitHub is right decision. It is simple, easy
and particularly fast, well it&#39;s static html pages anyway.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Rendering Backbone (Sub)View</title>
        <link href="http://nauvalatmaja.com/2014/12/29/rendering-backbone-subview/"/>
        <updated>2014-12-29T14:52:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2014-12-29,/2014/12/29/rendering-backbone-subview/</id>
        <content type="html"><![CDATA[<p>When learning backbone.js (i&#39;m a novice by the way), at first, I was actually having a hard time
to grasp the backbone view. Especially how the best practice to render
the view and build a rather complex view consists of several subviews.
And then, magically I came accross Ian Storm Taylor&#39;s post about 
<a href="http://ianstormtaylor.com/rendering-views-in-backbonejs-isnt-always-simple/">his experience on dealing with backbone subview</a>.
At first I didn&#39;t quiet understand well about the post until I found
<a href="http://stackoverflow.com/questions/9337927/how-to-handle-initializing-and-rendering-subviews-in-backbone-js">a thread on stackoverflow</a>, which was started by <a href="http://ianstormtaylor.com">Ian Storm Taylor</a>.</p>
<p>Based on the posts, I created a simple case study to better understand how it works.
The requirements were to list pairs of username and email input by users.
So at first I created the view as listed below:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"application"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Add a user to the user list<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"login"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"online-users"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"login-template"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/template"</span>&gt;</span><span class="javascript">
  &lt;h1&gt; login &lt;<span class="hljs-regexp">/h1&gt;
  &lt;input id="username" type="text" placeholder="username" /</span>&gt; 
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">id</span> = "<span class="hljs-attribute">email</span>" <span class="hljs-attribute">type</span> = "<span class="hljs-attribute">text</span>" <span class="hljs-attribute">placeholder</span> = "<span class="hljs-attribute">email</span>" /&gt;</span> 
  <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span> = "<span class="hljs-attribute">button-login</span>" <span class="hljs-attribute">type</span> = "<span class="hljs-attribute">button</span>"&gt;</span> Login <span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"userlist-template"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/template"</span>&gt;</span><span class="javascript">
  &lt;li&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">%=</span> <span class="hljs-attribute">username</span> %&gt;</span> / <span class="hljs-tag">&lt;<span class="hljs-title">%=</span> <span class="hljs-attribute">email</span> %&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span> = "<span class="hljs-attribute">force-logout</span>"&gt;</span>force logout<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
</code></pre>
<p>To better visualize, lets see this picture:</p>
<p><img src="http://nauvalatmaja.com/images/backbone-view-schema.png" alt="Application view"></p>
<!-- Read more -->

<p>The outer container is <code>#application</code> and inside it there are
two other sub-containers <code>#login</code> and <code>#online-users</code>. Each container
or sub-container is represented in a separated view: <code>AppView</code>, <code>LoginView</code>
and <code>UserListView</code> respectively. To make it
nicely structured, the <code>UserListView</code> has a sub-view
called <code>UserView</code> that renders each pair of username and email 
handles of the button clicked event.
there is an exception for the last view where the view is 
created for each username-password pair then appended in 
the container <code>#online-users</code>.</p>
<p>Now let&#39;s get to the code.</p>
<pre class="highlight"><code class="hljs javascript">app.AppView = Backbone.View.extend({
  el: <span class="hljs-string">'#application'</span>,

  initialize: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.users = <span class="hljs-keyword">new</span> app.UserList();

    <span class="hljs-keyword">this</span>.loginView = <span class="hljs-keyword">new</span> app.LoginView();
    <span class="hljs-keyword">this</span>.userListView = <span class="hljs-keyword">new</span> app.UserListView( { collection: <span class="hljs-keyword">this</span>.users } );

    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.loginView, <span class="hljs-string">'login'</span>, <span class="hljs-keyword">this</span>.login);
  },

  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.loginView.setElement(<span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#login'</span>)).render();
    <span class="hljs-keyword">this</span>.userListView.setElement(<span class="hljs-keyword">this</span>.$(<span class="hljs-string">'#online-users'</span>)).render();
  },

  <span class="hljs-comment">/* ... */</span>

  login: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(user)</span> </span>{
    <span class="hljs-keyword">this</span>.users.create( user );
  }
});

app.LoginView = Backbone.View.extend({
  template: _.template($(<span class="hljs-string">'#login-template'</span>).html()),

  events: {
    <span class="hljs-string">'click #button-login'</span>: <span class="hljs-string">'login'</span>
  },

  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.$el.html(<span class="hljs-keyword">this</span>.template());
  },

  login: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">// login logic</span>
  },

  <span class="hljs-comment">/* ... */</span>
});
</code></pre>
<p>Here, the most important thing to connect Backbone view to
the html is the <code>el</code> (element) property. The <code>el</code> property defines to 
which element the view template will be rendered, or at least in this case 
study. In the <code>AppView</code> the <code>el</code> is set to <code>#application</code> 
as the root container of the application. However, for its 
sub-views, the <code>el</code> property is not defined in the view
definition but set dynamically using <code>setElement</code> method.
As Ian suggested, this is done to avoid the unbinding of 
sub-views&#39; events when rendered more than a time.</p>
<p>The instantiation
of sub-views depends on how the sub-views are rendered.
<code>LoginView</code> and <code>UserListView</code> are instantiated in
the <code>initialize</code> method as the application only need 
an instance for each of them. In contrast, <code>UserView</code>
is instantiated for each user (model) as it needs to
associate the button click event inside the view with
the contained model.</p>
<pre class="highlight"><code class="hljs javascript">app.UserListView = Backbone.View.extend({
  initialize: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.collection, <span class="hljs-string">'add'</span>, <span class="hljs-keyword">this</span>.renderOne);
    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.collection, <span class="hljs-string">'reset'</span>, <span class="hljs-keyword">this</span>.renderAll);
  },

  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.renderAll();
  },

  renderOne: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(user)</span> </span>{
    <span class="hljs-keyword">var</span> view = <span class="hljs-keyword">new</span> app.UserView( { model: user } );
    <span class="hljs-keyword">this</span>.$el.append(view.render().el);
  },

  renderAll: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.collection.each(<span class="hljs-keyword">this</span>.renderOne);
  }
});

app.UserView = Backbone.View.extend({
  template: _.template($(<span class="hljs-string">'#userlist-template'</span>).html()),
  tagName: <span class="hljs-string">'li'</span>,
  events: {
      <span class="hljs-string">'click #force-logout'</span>: <span class="hljs-string">'clear'</span>
  },

  initialize: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">'destroy'</span>, <span class="hljs-keyword">this</span>.remove);
  },

  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.$el.html( <span class="hljs-keyword">this</span>.template( <span class="hljs-keyword">this</span>.model.attributes ) );
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
  },

  clear: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">this</span>.model.destroy();
  }
});
</code></pre>
<p>To make the code structured nicely, I used the <code>html()</code> and
<code>append()</code> method of Backbone view&#39;s <code>$el</code> property. Some people
might use jquery&#39;s selector <code>$(&#39;.element&#39;)</code> to render the html,
which I think it isn&#39;t clean enough. Lastly, I&#39;ve made a <a href="http://jsfiddle.net/npatmaja/csL45j3s/">fiddle</a>
about this post where you can play around. Hope this post 
helps someone to understand more about backbone view.</p>
]]></content>
    </entry>
    
    <entry>
        <title>Blogging with Docpad</title>
        <link href="http://nauvalatmaja.com/2014/12/28/blogging-with-docpad/"/>
        <updated>2014-12-28T10:31:00.000Z</updated>
        <id>tag:nauvalatmaja.com,2014-12-28,/2014/12/28/blogging-with-docpad/</id>
        <content type="html"><![CDATA[<p>It has been a long time since I planned to have a dedicated blog for 
writing about some more <em>&quot;meaningful&quot;</em> stuff instead of just
my rumbling I posted on my <a href="http://noval78.wordpress.com">trash bin</a>. 
After looking out what blogging platforms available, I finally decided 
to use <a href="https://pages.github.com/">GitHub pages</a> 
to host my posts. However, as it uses <a href="https://github.com/jekyll/jekyll">Jekyll</a>
as its engine, many people suggested to install Jekyll in my local machine, which
was a no-show for me. So I tried to built it 
manually without installing Jekyll locally, which was proven to be a 
hard thing to do. Later, I had to postponed the project
due to some higher priority activities until recent time.</p>
<!-- Read more -->

<p>As I am now re-learning javascript and node.js, I searched about static 
blogging with node.js to pick this blog project up once again, with a resolution 
to make it online. And that was how I came accross
<a href="http://docpad.org">docpad</a>, a dinamyc static site generator built 
using node.js. Similar to Jekyll, it can render markdown files to 
bunch of static htmls. Surprisingly, to build a blog using docpad wasn&#39;t hard 
thing to do. There were skeletons that you can choose
to bootstrap your blog when you run <code>docpad run</code> for the first time.</p>
<p><img src="http://nauvalatmaja.com/images/docpad-run-skeleton.png" alt="docpad skeletons"></p>
<p>After creating the skeleton, next thing that is needed to do is to 
customize blog&#39;s appearance. Since I am bad at web design, I searched 
for blogs built using 
docpad whom source hosted on github. Fortunately, I found
<a href="http://www.ewal.net">Erv Walter&#39;s blog</a> which satisfied my 
requirements for being simple and clean. So I cloned the blog&#39;s repository
and adapted it to the skeleton I used and did some minor changes, 
and <em>voila</em> here it is. Lastly, I
used <a href="https://docpad.org/plugin/ghpages">GitHub pages plugin</a>
to <a href="http://seethroughtrees.github.io/posts/github-pages-with-docpad/">push the blog to github</a>.</p>
]]></content>
    </entry>
    
</feed>