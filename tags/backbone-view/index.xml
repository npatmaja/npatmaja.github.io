<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backbone View on nauval atmaja</title>
    <link>http://nauvalatmaja.com/tags/backbone-view/</link>
    <description>Recent content in Backbone View on nauval atmaja</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://nauvalatmaja.com/tags/backbone-view/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rendering Backbone (Sub)View</title>
      <link>http://nauvalatmaja.com/2014/12/29/rendering-backbone-subview/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nauvalatmaja.com/2014/12/29/rendering-backbone-subview/</guid>
      <description>&lt;p&gt;When learning backbone.js (i&amp;rsquo;m a novice by the way), at first, I was actually having a hard time
to grasp the backbone view. Especially how the best practice to render
the view and build a rather complex view consists of several subviews.
And then, magically I came accross Ian Storm Taylor&amp;rsquo;s post about
&lt;a href=&#34;http://ianstormtaylor.com/rendering-views-in-backbonejs-isnt-always-simple/&#34;&gt;his experience on dealing with backbone subview&lt;/a&gt;.
At first I didn&amp;rsquo;t quiet understand well about the post until I found
&lt;a href=&#34;http://stackoverflow.com/questions/9337927/how-to-handle-initializing-and-rendering-subviews-in-backbone-js&#34;&gt;a thread on stackoverflow&lt;/a&gt;, which was started by &lt;a href=&#34;http://ianstormtaylor.com&#34;&gt;Ian Storm Taylor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Based on the posts, I created a simple case study to better understand how it works.
The requirements were to list pairs of username and email input by users.
So at first I created the view as listed below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;application&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Add a user to the user list&amp;lt;/p&amp;gt;
  &amp;lt;div id=&amp;quot;login&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;ul id=&amp;quot;online-users&amp;quot;&amp;gt;&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script id=&amp;quot;login-template&amp;quot; type=&amp;quot;text/template&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt; login &amp;lt;/h1&amp;gt;
  &amp;lt;input id=&amp;quot;username&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;username&amp;quot; /&amp;gt;
  &amp;lt;input id = &amp;quot;email&amp;quot; type = &amp;quot;text&amp;quot; placeholder = &amp;quot;email&amp;quot; /&amp;gt;
  &amp;lt;button id = &amp;quot;button-login&amp;quot; type = &amp;quot;button&amp;quot;&amp;gt; Login &amp;lt;/button&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script id=&amp;quot;userlist-template&amp;quot; type=&amp;quot;text/template&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;%= username %&amp;gt; / &amp;lt;%= email %&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;button id = &amp;quot;force-logout&amp;quot;&amp;gt;force logout&amp;lt;/button&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To better visualize, lets see this picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nauvalatmaja.com/img/backbone-view-schema.png&#34; alt=&#34;Application view&#34; /&gt;&lt;/p&gt;

&lt;!-- Read more --&gt;

&lt;p&gt;The outer container is &lt;code&gt;#application&lt;/code&gt; and inside it there are
two other sub-containers &lt;code&gt;#login&lt;/code&gt; and &lt;code&gt;#online-users&lt;/code&gt;. Each container
or sub-container is represented in a separated view: &lt;code&gt;AppView&lt;/code&gt;, &lt;code&gt;LoginView&lt;/code&gt;
and &lt;code&gt;UserListView&lt;/code&gt; respectively. To make it
nicely structured, the &lt;code&gt;UserListView&lt;/code&gt; has a sub-view
called &lt;code&gt;UserView&lt;/code&gt; that renders each pair of username and email
handles of the button clicked event.
there is an exception for the last view where the view is
created for each username-password pair then appended in
the container &lt;code&gt;#online-users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s get to the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.AppView = Backbone.View.extend({
  el: &#39;#application&#39;,

  initialize: function () {
    this.users = new app.UserList();

    this.loginView = new app.LoginView();
    this.userListView = new app.UserListView( { collection: this.users } );

    this.listenTo(this.loginView, &#39;login&#39;, this.login);
  },

  render: function () {
    this.loginView.setElement(this.$(&#39;#login&#39;)).render();
    this.userListView.setElement(this.$(&#39;#online-users&#39;)).render();
  },

  /* ... */

  login: function (user) {
    this.users.create( user );
  }
});

app.LoginView = Backbone.View.extend({
  template: _.template($(&#39;#login-template&#39;).html()),

  events: {
    &#39;click #button-login&#39;: &#39;login&#39;
  },

  render: function () {
      this.$el.html(this.template());
  },

  login: function () {
    // login logic
  },

  /* ... */
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the most important thing to connect Backbone view to
the html is the &lt;code&gt;el&lt;/code&gt; (element) property. The &lt;code&gt;el&lt;/code&gt; property defines to
which element the view template will be rendered, or at least in this case
study. In the &lt;code&gt;AppView&lt;/code&gt; the &lt;code&gt;el&lt;/code&gt; is set to &lt;code&gt;#application&lt;/code&gt;
as the root container of the application. However, for its
sub-views, the &lt;code&gt;el&lt;/code&gt; property is not defined in the view
definition but set dynamically using &lt;code&gt;setElement&lt;/code&gt; method.
As Ian suggested, this is done to avoid the unbinding of
sub-views&amp;rsquo; events when rendered more than a time.&lt;/p&gt;

&lt;p&gt;The instantiation
of sub-views depends on how the sub-views are rendered.
&lt;code&gt;LoginView&lt;/code&gt; and &lt;code&gt;UserListView&lt;/code&gt; are instantiated in
the &lt;code&gt;initialize&lt;/code&gt; method as the application only need
an instance for each of them. In contrast, &lt;code&gt;UserView&lt;/code&gt;
is instantiated for each user (model) as it needs to
associate the button click event inside the view with
the contained model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.UserListView = Backbone.View.extend({
  initialize: function () {
    this.listenTo(this.collection, &#39;add&#39;, this.renderOne);
    this.listenTo(this.collection, &#39;reset&#39;, this.renderAll);
  },

  render: function () {
    this.renderAll();
  },

  renderOne: function (user) {
    var view = new app.UserView( { model: user } );
    this.$el.append(view.render().el);
  },

  renderAll: function () {
    this.collection.each(this.renderOne);
  }
});

app.UserView = Backbone.View.extend({
  template: _.template($(&#39;#userlist-template&#39;).html()),
  tagName: &#39;li&#39;,
  events: {
      &#39;click #force-logout&#39;: &#39;clear&#39;
  },

  initialize: function () {
    this.listenTo(this.model, &#39;destroy&#39;, this.remove);
  },

  render: function () {
      this.$el.html( this.template( this.model.attributes ) );
      return this;
  },

  clear: function () {
      this.model.destroy();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make the code structured nicely, I used the &lt;code&gt;html()&lt;/code&gt; and
&lt;code&gt;append()&lt;/code&gt; method of Backbone view&amp;rsquo;s &lt;code&gt;$el&lt;/code&gt; property. Some people
might use jquery&amp;rsquo;s selector &lt;code&gt;$(&#39;.element&#39;)&lt;/code&gt; to render the html,
which I think it isn&amp;rsquo;t clean enough. Lastly, I&amp;rsquo;ve made a &lt;a href=&#34;http://jsfiddle.net/npatmaja/csL45j3s/&#34;&gt;fiddle&lt;/a&gt;
about this post where you can play around. Hope this post
helps someone to understand more about backbone view.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>