<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on nauval atmaja</title>
    <link>http://nauvalatmaja.com/tags/code/</link>
    <description>Recent content in Code on nauval atmaja</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jan 2016 20:20:12 +0700</lastBuildDate>
    <atom:link href="http://nauvalatmaja.com/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On Learning to Code</title>
      <link>http://nauvalatmaja.com/2016/01/17/on-learning-to-code/</link>
      <pubDate>Sun, 17 Jan 2016 20:20:12 +0700</pubDate>
      
      <guid>http://nauvalatmaja.com/2016/01/17/on-learning-to-code/</guid>
      <description>

&lt;p&gt;My friend at office asked me recently &amp;ldquo;Can I learn to code by myself?&amp;rdquo;. You may have probably encountered
&lt;a href=&#34;https://medium.com/search?q=learn%20to%20code&#34;&gt;one or two posts that talk about it elsewhere&lt;/a&gt;. And they point to the
same answer as mine: &amp;ldquo;yes you can&amp;rdquo;. As a background, I receive a formal education in Information System (which had less computer
science-related courses than computer science or informatics major) and it&amp;rsquo;s
past a decade when I wrote my first &lt;em&gt;Hello World!&lt;/em&gt; program during my first
semester at university.&lt;/p&gt;

&lt;p&gt;I have done programming over a decade now. Compared to a decade earlier, now
is relatively easier for someone to learn to code. A lot of &lt;a href=&#34;https://www.udemy.com/&#34;&gt;web apps&lt;/a&gt;
&lt;a href=&#34;https://www.codecademy.com/&#34;&gt;built for&lt;/a&gt; &lt;a href=&#34;https://www.codeschool.com/&#34;&gt;this sole purpose&lt;/a&gt; available for either
free or paid by subscription. Moreover, a zillion of tutorials, discussion board and online classes are available
over the internet. However, even with aforementioned resources, learning to
code is still a formidable undertaking. Some will survive and not few won&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Though I code for living and done many years programming I find myself still
learning to program and to have better craftmanship on programming. I&amp;rsquo;ve been
through the phase from zero to able to write small-course-assignmet programs
to write bit more complex piece of software, and here&amp;rsquo;s some of my thoughts on learning to code based on those experience.&lt;/p&gt;

&lt;h1 id=&#34;perseverance-is-a-must:832af4bab778639ada7945e8314a1044&#34;&gt;Perseverance is a must&lt;/h1&gt;

&lt;p&gt;Learning to code can be fun at the beginning. Solving small problems keeps us
going. However, when we getting closer to real world problems, we might
stumble upon problems that are really hard to solve. We spend hours or even
days to work on it but to no avail. This is where perseverance play its part
&amp;mdash; to keep trying until the problem is solved.&lt;/p&gt;

&lt;h1 id=&#34;google-is-your-best-companion:832af4bab778639ada7945e8314a1044&#34;&gt;Google is your best companion&lt;/h1&gt;

&lt;p&gt;Well, it&amp;rsquo;s not necessarily Google, any search engine will do. In fact, I use
[duckduckgo][&lt;a href=&#34;https://duckduckgo.com/&#34;&gt;https://duckduckgo.com/&lt;/a&gt;] most of the time. Believe me, we are not
the only one who have the unsolved problems. A lot of programmers are struggling with the same problems as well and most of the case they have already have the answers. Hence a skill to search on a search engine is a
necessity when programming.&lt;/p&gt;

&lt;h1 id=&#34;focus-don-t-get-distracted:832af4bab778639ada7945e8314a1044&#34;&gt;Focus, don&amp;rsquo;t get distracted&lt;/h1&gt;

&lt;p&gt;To be honest, this one is rather hard for me, to focus on completing
one thing at a time. Programming could easily overwhelm someone as there
are a lot of information need to digest. Therefore, it is best to have a
plan when we learn programming of any new programming languages. Learn the
basic first, don&amp;rsquo;t be tempted to learn advance stuff at the beginning.&lt;/p&gt;

&lt;h1 id=&#34;get-the-fundamentals:832af4bab778639ada7945e8314a1044&#34;&gt;Get the fundamentals&lt;/h1&gt;

&lt;p&gt;Some may said it is not really important, but the right data structure and algorithm can optimize a program by lot compared to not using any. Knowing fundamentals in computer science can be a clear separation between a bad programmer with a good one.&lt;/p&gt;

&lt;h1 id=&#34;familiarize-with-well-written-projects:832af4bab778639ada7945e8314a1044&#34;&gt;Familiarize with well-written projects&lt;/h1&gt;

&lt;p&gt;Reading and examining well-written open source projects help a lot to benchmark ourself with the best practice out there. We can learn how to properly structure our project, how to make proper comments,
and how to modularize the code. After a while we will find that our code written so far is just a pile of garbage compared to the project. However,
it is a necessary part of learning; we have to know our mistakes to make
improvements.&lt;/p&gt;

&lt;div class=&#34;sectionsign&#34;
  style=&#34;
    margin:0 auto;
    margin-top: -1rem;
    margin-bottom: 1rem;
    text-align: center;
  &#34;
  &gt;
  &lt;span&gt;&amp;#8213; &amp;#167; &amp;#8213;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;In the end, I believe everyone can code but to be a better programmer requires
one step beyond that, with considerable amount of efforts. Me myself is still
in the middle of voyage to go there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ways to Boost Coding Productivity</title>
      <link>http://nauvalatmaja.com/2015/04/09/ways-to-boost-coding-productivity/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://nauvalatmaja.com/2015/04/09/ways-to-boost-coding-productivity/</guid>
      <description>

&lt;p&gt;As a someone who codes frequently, in daily basis in fact, I need an
environment that is able to boost my productivity when coding. Some
might argue that one could be productive in every given environment.
That is the ideal case, however live is not. Hence, productivity
tools and workflows are created.&lt;/p&gt;

&lt;p&gt;During my coding adventure, I found some &lt;em&gt;ways&lt;/em&gt; that help me
to boost up my productivity, which are listed below.&lt;/p&gt;

&lt;h1 id=&#34;use-nix-platform:ad90fd8f744ffbb40f5075f18d48949f&#34;&gt;Use *nix platform&lt;/h1&gt;

&lt;p&gt;It come across to me that I use shell (terminal) a lot when writing a program,
e.g., navigating through directories, executing commands, committing
to local and remote repositories etc. In that regards,
no better OS to provide that other than *nix (either OS X or linux).
Moreover, they are more stable, more secure and easier to configure rather
than Windows. The last part is a bit bias as I have not been using
Windows for several years now, maybe in the latest release Windows
are more configurable than the previous versions. Well, I&amp;rsquo;m a pragmatic
person, I use what works for me.&lt;/p&gt;

&lt;h1 id=&#34;use-your-most-comfortable-editor:ad90fd8f744ffbb40f5075f18d48949f&#34;&gt;Use your most comfortable editor&lt;/h1&gt;

&lt;p&gt;I use &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;&lt;em&gt;Sublime Text 3&lt;/em&gt;&lt;/a&gt; to code mostly
everything, except Java (I&amp;rsquo;m still using Eclipse for that).
&lt;em&gt;Sublime Text&lt;/em&gt; is a powerful yet easy to use
text editor that provides a lot of functionalities. Moreover, it
has myriad of plugins to make developer&amp;rsquo;s life easier and tons of
themes please the eyes, which is also a very important thing (to
me at the very least). If you miss
the efficient vim key bindings, use &lt;a href=&#34;https://github.com/guillermooo/Vintageous&#34;&gt;vintageaus&lt;/a&gt;
to emulate vim key bindings inside &lt;em&gt;Sublime Text&lt;/em&gt;.
&lt;!-- Read more --&gt;&lt;/p&gt;

&lt;h1 id=&#34;change-to-zsh:ad90fd8f744ffbb40f5075f18d48949f&#34;&gt;Change to zsh&lt;/h1&gt;

&lt;p&gt;See
&lt;a href=&#34;http://www.slideshare.net/jaguardesignstudio/why-zsh-is-cooler-than-your-shell-16194692&#34;&gt;Brendon Repp&amp;rsquo;s presentation&lt;/a&gt;
on why to &lt;a href=&#34;http://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;. I use &lt;a href=&#34;http://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; to manage the zsh
configuration and all. To sugar its visual, I use the
&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster&#34;&gt;agnoster&lt;/a&gt; theme. Besides,
the theme directly tells me in what git branch I&amp;rsquo;m currently working on in an awesome way.
Hence no need to type &lt;code&gt;git status&lt;/code&gt; to see the working branch. Combined with the right git
aliases, it feels like home when coding.&lt;/p&gt;

&lt;h1 id=&#34;add-aliases-your-shell:ad90fd8f744ffbb40f5075f18d48949f&#34;&gt;Add aliases your shell&lt;/h1&gt;

&lt;p&gt;Having short aliases is always a good thing to reduce finger movements when typing in
a terminal regardless of what shell you are using. One of useful alias is
aliases to go the the frequently
visited directoris. So, instead of typing &lt;code&gt;cd ~/codes/learning/nodejs&lt;/code&gt; it&amp;rsquo;s simpler
to just type &lt;code&gt;learn-nodejs&lt;/code&gt; right?!&lt;/p&gt;

&lt;h1 id=&#34;adopt-github-flow-and-the-supporting-git-aliases:ad90fd8f744ffbb40f5075f18d48949f&#34;&gt;Adopt GitHub Flow and the supporting git aliases&lt;/h1&gt;

&lt;p&gt;I have been using &lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow&lt;/a&gt;
for sometime in my recent projects and find it
is a really straight forward approach in managing the development-deployment
workflow when using git. Adding the
&lt;a href=&#34;http://haacked.com/archive/2014/07/28/github-flow-aliases/&#34;&gt;GitHub flow aliases&lt;/a&gt;
to your &lt;code&gt;~/.gitconfig&lt;/code&gt; will be even more fun. Here&amp;rsquo;s
&lt;a href=&#34;https://gist.github.com/npatmaja/d72daeb2ec0f21f1af2a&#34;&gt;my &lt;code&gt;.gitconfig&lt;/code&gt;&amp;rsquo;s aliases section&lt;/a&gt;
that has some additional aliases beside the GitHub flow aliases.&lt;/p&gt;

&lt;h1 id=&#34;have-a-to-do-list:ad90fd8f744ffbb40f5075f18d48949f&#34;&gt;Have a To-do list&lt;/h1&gt;

&lt;p&gt;A to-do list is a really powerful tool to manage and prioritize your tasks. Sometimes
it is taken for granted but it does help to keep the focus on the tasks that
should be done, especially for an easily distracted person (just like myself).
No need for fancy tools to create a to-do list, any text editor will do. However,
&lt;a href=&#34;https://evernote.com/&#34;&gt;Evernote&lt;/a&gt; or OS X&amp;rsquo;s Notes or other to-do list apps
will be better choice.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t claim the list above is the best way to increase your coding productivity
but it works for me and my current working environment. The list is not and will
never be the final one because achieving better productivity is a long live
adventure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rendering Backbone (Sub)View</title>
      <link>http://nauvalatmaja.com/2014/12/29/rendering-backbone-subview/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nauvalatmaja.com/2014/12/29/rendering-backbone-subview/</guid>
      <description>&lt;p&gt;When learning backbone.js (i&amp;rsquo;m a novice by the way), at first, I was actually having a hard time
to grasp the backbone view. Especially how the best practice to render
the view and build a rather complex view consists of several subviews.
And then, magically I came accross Ian Storm Taylor&amp;rsquo;s post about
&lt;a href=&#34;http://ianstormtaylor.com/rendering-views-in-backbonejs-isnt-always-simple/&#34;&gt;his experience on dealing with backbone subview&lt;/a&gt;.
At first I didn&amp;rsquo;t quiet understand well about the post until I found
&lt;a href=&#34;http://stackoverflow.com/questions/9337927/how-to-handle-initializing-and-rendering-subviews-in-backbone-js&#34;&gt;a thread on stackoverflow&lt;/a&gt;, which was started by &lt;a href=&#34;http://ianstormtaylor.com&#34;&gt;Ian Storm Taylor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Based on the posts, I created a simple case study to better understand how it works.
The requirements were to list pairs of username and email input by users.
So at first I created the view as listed below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;application&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Add a user to the user list&amp;lt;/p&amp;gt;
  &amp;lt;div id=&amp;quot;login&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;ul id=&amp;quot;online-users&amp;quot;&amp;gt;&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script id=&amp;quot;login-template&amp;quot; type=&amp;quot;text/template&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt; login &amp;lt;/h1&amp;gt;
  &amp;lt;input id=&amp;quot;username&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;username&amp;quot; /&amp;gt;
  &amp;lt;input id = &amp;quot;email&amp;quot; type = &amp;quot;text&amp;quot; placeholder = &amp;quot;email&amp;quot; /&amp;gt;
  &amp;lt;button id = &amp;quot;button-login&amp;quot; type = &amp;quot;button&amp;quot;&amp;gt; Login &amp;lt;/button&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script id=&amp;quot;userlist-template&amp;quot; type=&amp;quot;text/template&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;%= username %&amp;gt; / &amp;lt;%= email %&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;button id = &amp;quot;force-logout&amp;quot;&amp;gt;force logout&amp;lt;/button&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To better visualize, lets see this picture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nauvalatmaja.com/img/backbone-view-schema.png&#34; alt=&#34;Application view&#34; /&gt;&lt;/p&gt;

&lt;!-- Read more --&gt;

&lt;p&gt;The outer container is &lt;code&gt;#application&lt;/code&gt; and inside it there are
two other sub-containers &lt;code&gt;#login&lt;/code&gt; and &lt;code&gt;#online-users&lt;/code&gt;. Each container
or sub-container is represented in a separated view: &lt;code&gt;AppView&lt;/code&gt;, &lt;code&gt;LoginView&lt;/code&gt;
and &lt;code&gt;UserListView&lt;/code&gt; respectively. To make it
nicely structured, the &lt;code&gt;UserListView&lt;/code&gt; has a sub-view
called &lt;code&gt;UserView&lt;/code&gt; that renders each pair of username and email
handles of the button clicked event.
there is an exception for the last view where the view is
created for each username-password pair then appended in
the container &lt;code&gt;#online-users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s get to the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.AppView = Backbone.View.extend({
  el: &#39;#application&#39;,

  initialize: function () {
    this.users = new app.UserList();

    this.loginView = new app.LoginView();
    this.userListView = new app.UserListView( { collection: this.users } );

    this.listenTo(this.loginView, &#39;login&#39;, this.login);
  },

  render: function () {
    this.loginView.setElement(this.$(&#39;#login&#39;)).render();
    this.userListView.setElement(this.$(&#39;#online-users&#39;)).render();
  },

  /* ... */

  login: function (user) {
    this.users.create( user );
  }
});

app.LoginView = Backbone.View.extend({
  template: _.template($(&#39;#login-template&#39;).html()),

  events: {
    &#39;click #button-login&#39;: &#39;login&#39;
  },

  render: function () {
      this.$el.html(this.template());
  },

  login: function () {
    // login logic
  },

  /* ... */
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the most important thing to connect Backbone view to
the html is the &lt;code&gt;el&lt;/code&gt; (element) property. The &lt;code&gt;el&lt;/code&gt; property defines to
which element the view template will be rendered, or at least in this case
study. In the &lt;code&gt;AppView&lt;/code&gt; the &lt;code&gt;el&lt;/code&gt; is set to &lt;code&gt;#application&lt;/code&gt;
as the root container of the application. However, for its
sub-views, the &lt;code&gt;el&lt;/code&gt; property is not defined in the view
definition but set dynamically using &lt;code&gt;setElement&lt;/code&gt; method.
As Ian suggested, this is done to avoid the unbinding of
sub-views&amp;rsquo; events when rendered more than a time.&lt;/p&gt;

&lt;p&gt;The instantiation
of sub-views depends on how the sub-views are rendered.
&lt;code&gt;LoginView&lt;/code&gt; and &lt;code&gt;UserListView&lt;/code&gt; are instantiated in
the &lt;code&gt;initialize&lt;/code&gt; method as the application only need
an instance for each of them. In contrast, &lt;code&gt;UserView&lt;/code&gt;
is instantiated for each user (model) as it needs to
associate the button click event inside the view with
the contained model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.UserListView = Backbone.View.extend({
  initialize: function () {
    this.listenTo(this.collection, &#39;add&#39;, this.renderOne);
    this.listenTo(this.collection, &#39;reset&#39;, this.renderAll);
  },

  render: function () {
    this.renderAll();
  },

  renderOne: function (user) {
    var view = new app.UserView( { model: user } );
    this.$el.append(view.render().el);
  },

  renderAll: function () {
    this.collection.each(this.renderOne);
  }
});

app.UserView = Backbone.View.extend({
  template: _.template($(&#39;#userlist-template&#39;).html()),
  tagName: &#39;li&#39;,
  events: {
      &#39;click #force-logout&#39;: &#39;clear&#39;
  },

  initialize: function () {
    this.listenTo(this.model, &#39;destroy&#39;, this.remove);
  },

  render: function () {
      this.$el.html( this.template( this.model.attributes ) );
      return this;
  },

  clear: function () {
      this.model.destroy();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make the code structured nicely, I used the &lt;code&gt;html()&lt;/code&gt; and
&lt;code&gt;append()&lt;/code&gt; method of Backbone view&amp;rsquo;s &lt;code&gt;$el&lt;/code&gt; property. Some people
might use jquery&amp;rsquo;s selector &lt;code&gt;$(&#39;.element&#39;)&lt;/code&gt; to render the html,
which I think it isn&amp;rsquo;t clean enough. Lastly, I&amp;rsquo;ve made a &lt;a href=&#34;http://jsfiddle.net/npatmaja/csL45j3s/&#34;&gt;fiddle&lt;/a&gt;
about this post where you can play around. Hope this post
helps someone to understand more about backbone view.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>