<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docpad on nauval atmaja</title>
    <link>http://nauvalatmaja.com/tags/docpad/</link>
    <description>Recent content in Docpad on nauval atmaja</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Dec 2015 00:30:28 +0700</lastBuildDate>
    <atom:link href="http://nauvalatmaja.com/tags/docpad/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Moving to Hugo</title>
      <link>http://nauvalatmaja.com/2015/12/27/moving-to-hugo/</link>
      <pubDate>Sun, 27 Dec 2015 00:30:28 +0700</pubDate>
      
      <guid>http://nauvalatmaja.com/2015/12/27/moving-to-hugo/</guid>
      <description>

&lt;p&gt;Several weeks ago, my &lt;a href=&#34;http://nauvalatmaja.com/2014/12/28/blogging-with-docpad/&#34;&gt;Docpad&lt;/a&gt; installation got screwed.
There was some errors when I tried to run it. My assumption
was because I just moved to Node.js 5.x, so I tried to upgrade
(or re-install it, maybe) it. Though the errors are gone, it
did not work as it used to be, it failed to build my blog
properly &amp;mdash; or I just forgotten how to use it, that&amp;rsquo;s another
possibility.&lt;/p&gt;

&lt;p&gt;Since I was looking for alternatives, I found &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a
static site generator created by &lt;a href=&#34;http://spf13.com/&#34;&gt;Steve Francia&lt;/a&gt; using
&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. The documentation was comprehensive enough to
get me started. Thanks to Hugo I got this blog up and running
again.&lt;/p&gt;

&lt;p&gt;After digging a bit deeper into Hugo, Compared to Docpad,
Hugo came out on top. The first and foremost deciding factor
to me was speed. Docpad took more than 5 seconds to generate
my blog with just merely 7 posts in it, and (most) sometimes
it took longer than that.
It was quite unpleasant experience when I drafted
a blog post and want to preview it but need to wait that much
and to make it worse I did it quite often, conscious or
un-consciously. Amazingly, Hugo took only around 100ms to generate
my blog, that was 500 time faster, awesome!&lt;/p&gt;

&lt;p&gt;So, if you have the same problem as mine or just want to try new
things, here&amp;rsquo;s my &lt;strong&gt;Hugo How To&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;setup-the-site:c708f69283c7d428e0643535a16e1df4&#34;&gt;Setup the site&lt;/h1&gt;

&lt;h2 id=&#34;install-hugo-and-get-it-running:c708f69283c7d428e0643535a16e1df4&#34;&gt;Install Hugo and get it running&lt;/h2&gt;

&lt;p&gt;Hugo &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;is easy to install&lt;/a&gt;, you can download its
binary or install it via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; like I did
or if you feel a bit adventurous you might want to build it from
source, which might as well quite easy. To get Hugo runs actually
took quite minimal effort. The &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;quickstart&lt;/a&gt; do a really
good job to explain the step by step.&lt;/p&gt;

&lt;p&gt;One more thing I like about Hugo is it provides a better working
structure compared to Docpad. When creating a new site by running
&lt;code&gt;hugo new /path/to/site&lt;/code&gt;, Hugo creates a working skeleton
structure comprises &lt;code&gt;archtypes&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;layouts&lt;/code&gt;,
&lt;code&gt;static&lt;/code&gt; and &lt;code&gt;themes&lt;/code&gt;. Those directories are where we supposed
to put pre-configured &lt;em&gt;front matter&lt;/em&gt;, blog contents (posts),
data, site layouts, static files and themes that we want to use.
The &lt;a href=&#34;https://gohugo.io/overview/source-directory/&#34;&gt;Source Organization&lt;/a&gt;
section elaborates on the directory structure deeper.&lt;/p&gt;

&lt;h2 id=&#34;pick-your-theme-and-make-it-yours:c708f69283c7d428e0643535a16e1df4&#34;&gt;Pick your theme and make it yours&lt;/h2&gt;

&lt;p&gt;Hugo comes up with quite a lot &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;ready to use themes&lt;/a&gt;.
You can try all the themes by simply &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;clone all the themes&lt;/a&gt;
and run &lt;code&gt;hugo server -t &amp;lt;theme-name&amp;gt;&lt;/code&gt;. The command tells Hugo
to load the specified theme and use it to render the site then
runs a HTTP server to serve the generated site. If no directory
given (using &lt;code&gt;-d&lt;/code&gt; option), Hugo generates the site to your
machine&amp;rsquo;s memory when running the &lt;code&gt;hugo server&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If none of the themes up to your liking, then you can
&lt;a href=&#34;https://gohugo.io/themes/customizing/&#34;&gt;customize them&lt;/a&gt;
quite easy. You don&amp;rsquo;t need edit directly the theme you are using,
you only need to override the specific part to your liking
instead. The easiest way to do this is by copying the part that
you want to change from the themes directory to its respective
directory in your site, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp /themes/redlounge/layouts/index.html layouts/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and start modifying it. The way Hugo determines the layout
is to find respective files in &lt;code&gt;layouts&lt;/code&gt; then using defaults
&lt;code&gt;layouts/_defaults&lt;/code&gt; if the desired file can&amp;rsquo;t be found.
The search is then propagated to the used theme &lt;code&gt;themes/used-theme&lt;/code&gt; if the file still not found.&lt;/p&gt;

&lt;p&gt;For this blog, I choose &lt;a href=&#34;https://github.com/tmaiaroto/hugo-redlounge&#34;&gt;hugo-redlounge&lt;/a&gt;
as the base of my blog theme and customized it as you see now. Most of the customizations are related to styles, hence,
I use &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SCSS&lt;/a&gt; to modularize my custom CSS.
I put all the SCSS files in a separate &lt;code&gt;src&lt;/code&gt; directory and only
the resulting CSS is put in the &lt;code&gt;static&lt;/code&gt; directory to be used.
Another way is to clone &lt;a href=&#34;https://github.com/spf13/spf13.com&#34;&gt;Steve Francia&amp;rsquo;s website&lt;/a&gt;, which looks
really awesome and start to customize it as you see fit.&lt;/p&gt;

&lt;h2 id=&#34;migration:c708f69283c7d428e0643535a16e1df4&#34;&gt;Migration&lt;/h2&gt;

&lt;p&gt;Migrating from Docpad to Hugo should be easy assuming the posts
are written in markdown format. In my case, I just needed to copy all posts into &lt;code&gt;content/post&lt;/code&gt;. Copying the markdowns alone should be
enough to make Hugo renders them. However, you might want to
change the posts&amp;rsquo; &lt;a href=&#34;https://gohugo.io/content/front-matter&#34;&gt;front matter&lt;/a&gt;
to adhere Hugo&amp;rsquo;s format. Next is to migrate all the static files
to directory &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;hosting-on-github:c708f69283c7d428e0643535a16e1df4&#34;&gt;Hosting on GitHub&lt;/h1&gt;

&lt;p&gt;There are several ways to deploy generated site to GitHub-Pages.
Using &lt;code&gt;git subtree&lt;/code&gt; is one of them like shown in
&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;this tutorial&lt;/a&gt;.
The cons of this method is that you also keep track the generated
site directory to your working repository. This is a problem for
me as I have quite slow internet connection so I need the
the repository to be as small as possible.&lt;/p&gt;

&lt;p&gt;To solve the problem, I did is similar to what I did
previously to Docpad: make the generated site directory (default
is &lt;code&gt;public&lt;/code&gt;) ignored then clone the existing &lt;a href=&#34;https://pages.github.com/&#34;&gt;gh_pages&lt;/a&gt;
(create one if necessary) to directory &lt;code&gt;public&lt;/code&gt;. When deploying to GitHub, the sequence is: copy &lt;code&gt;public/.git&lt;/code&gt;, &lt;code&gt;public/.gitignore&lt;/code&gt;
somewhere else, generate the site, put back &lt;code&gt;.git&lt;/code&gt; and
&lt;code&gt;.gitignore&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt; then commit and push it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Do this only one time when setting up public dir.
# Assuming you are inside your working directory.
git clone git@github.com:user/user.github.io.git public
echo &amp;quot;public&amp;quot; &amp;gt;&amp;gt; .gitignore

# commit and push your repository
git commit -m &amp;quot;ignore public&amp;quot;
git push origin master

# Deployment sequence
# create temporary directory
mkdir tmp

# copy .git/ to temp
cp -r public/.git tmp/.git
cp public/.gitignore tmp/.gitignore

# clean out directory public and regenerate htmls
rm -rf public

# generate static htmls
hugo -t some_theme

# copy back the git files
cp -r tmp/.git public/.git
cp tmp/.gitignore public/.gitignore

# go to the out folder
pushd public &amp;gt; /dev/null

# create .nojekyll file
# https://github.com/blog/572-bypassing-jekyll-on-github-pages
touch .nojekyll

# add and push to github pages
git add -A
git commit -m &amp;quot;`date`&amp;quot;
git push -f origin master

# change back to root dir
popd &amp;gt; /dev/null

# remove temp directory
rm -rf tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;automation:c708f69283c7d428e0643535a16e1df4&#34;&gt;Automation&lt;/h1&gt;

&lt;p&gt;What I did next is to automate repetitive tasks such as deployment steps above, which is quite lengthy and prone to errors.
For this project
I decided to use &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;GNU&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;Make&lt;/a&gt; as the build tool
&amp;mdash; I used this
&lt;a href=&#34;https://gist.github.com/npatmaja/7f30c79c08cb315466dd#file-deploy&#34;&gt;bash script&lt;/a&gt; when dealing with Docpad previously. But, why Make?
Why not! Make has similar capabilities with other recent build tools
like Cake, Gulp or Grunt. Moreover, my machine has it pre-installed.
Currently, I&amp;rsquo;m still novice in Make, hence my terrible looking  &lt;a href=&#34;https://github.com/npatmaja/nauvalatmaja.com/blob/master/Makefile&#34;&gt;Makefile&lt;/a&gt;. Following this, I plan to use Make at my office
as the build tools of the project I&amp;rsquo;m working on. Hope I can be more
proficient along the time.&lt;/p&gt;

&lt;div class=&#34;sectionsign&#34;
  style=&#34;
    margin:0 auto;
    margin-top: -1rem;
    margin-bottom: 1rem;
    text-align: center;
  &#34;
  &gt;
  &lt;span&gt;&amp;#8213; &amp;#167; &amp;#8213;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;Overall, Hugo is a nice tool to play with. It is very fast, customizable and easy to operate. There are a lot of Hugo&amp;rsquo;s
features that yet to explore, e.g., shortcodes, taxonomies,
scratch, etc. Up to this point, I am a satisfied Hugo&amp;rsquo;s user, but,
we&amp;rsquo;ll see.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rendering Mermaid in Docpad</title>
      <link>http://nauvalatmaja.com/2015/01/13/rendering-mermaid-in-docpad/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://nauvalatmaja.com/2015/01/13/rendering-mermaid-in-docpad/</guid>
      <description>

&lt;p&gt;I stumbled across &lt;a href=&#34;http://knsv.github.io/mermaid/&#34;&gt;Mermaid&lt;/a&gt; when I saw
&lt;a href=&#34;https://twitter.com/nikmd23/status/553224624130228225&#34;&gt;@ronaldwidha retweeted a tweet about it&lt;/a&gt;.
Mermaid is a library for &lt;em&gt;writing&lt;/em&gt; diagrams instead of draw
them similar to &lt;a href=&#34;https://github.com/chjj/marked&#34;&gt;Marked&lt;/a&gt;
to markdown, awesome! So, I thought I could use this in my blog just in case I
need to draw some flowcharts or sequence diagrams in the future.&lt;/p&gt;

&lt;p&gt;DocPad uses Marked to render markdown to html via
&lt;a href=&#34;https://github.com/docpad/docpad-plugin-marked&#34;&gt;docpad-plugin-marked&lt;/a&gt;
but natively, it doesn&amp;rsquo;t support
Mermaid syntax. Fortunately, Marked provide
&lt;a href=&#34;https://github.com/chjj/marked#overriding-renderer-methods&#34;&gt;a way to override its renderer&lt;/a&gt;,
however, it is not yet supported in the current release of the docpad-plugin-marked,
and &lt;a href=&#34;https://github.com/docpad/docpad-plugin-marked/issues/11&#34;&gt;someone created a ticket on this issue&lt;/a&gt;.
So based on the
explanation there, I forked the plugin and started to hack it down.
To add the functionality itself was not that hard but to define a proper test
for the plugin was tougher than it looks, at least at first as I didn&amp;rsquo;t quite
understand how DocPad&amp;rsquo;s plugin tester works. Thanks to &lt;a href=&#34;http://www.delarre.net/posts/unit-testing-docpad-plugins/&#34;&gt;this awesome post&lt;/a&gt;,
I could finally write and pass the test. The working version of my fork
can be found &lt;a href=&#34;https://github.com/npatmaja/docpad-plugin-marked&#34;&gt;at my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Read more --&gt;

&lt;p&gt;To use the forked plugin, change the dependency definition in &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;docpad-plugin-marked&amp;quot;: &amp;quot;git+ssh://git@github.com:npatmaja/docpad-plugin-marked.git&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next is to redefine the &lt;code&gt;code&lt;/code&gt; renderer by putting the definition in the &lt;code&gt;docpad.coffee&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins:
  marked:
    markedRenderer:
      code: (code, lang) -&amp;gt;
        escape = (html, encode) -&amp;gt;
          pattern = if !encode then /&amp;amp;(?!#?\w+;)/g  else /&amp;amp;/g
          return html
            .replace(pattern, &#39;&amp;amp;amp;&#39;)
            .replace(/&amp;lt;/g, &#39;&amp;amp;lt;&#39;)
            .replace(/&amp;gt;/g, &#39;&amp;amp;gt;&#39;)
            .replace(/&amp;quot;/g, &#39;&amp;amp;quot;&#39;)
            .replace(/&#39;/g, &#39;&amp;amp;#39;&#39;)

        if code.match(/^sequenceDiagram/)|| code.match(/^graph/)
          return &amp;quot;&amp;lt;div class=\&amp;quot;mermaid\&amp;quot;&amp;gt;\n#{code}\n&amp;lt;/div&amp;gt;\n&amp;quot;
        else
          if @options.highlight
            out = @options.highlight code, lang
            if out != null &amp;amp;&amp;amp; out != code
              escaped = true
              code = out

          if !lang
            return &#39;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&#39; +
              (if escaped then code else escape(code, true)) +
              &#39;\n&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#39;

          return &#39;&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;&#39; +
            this.options.langPrefix +
            escape(lang, true) +
            &#39;&amp;quot;&amp;gt;&#39; +
            (if escaped then code else escape(code, true)) +
            &#39;\n&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\n&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, I added Mermaid.js to blog&amp;rsquo;s layout as mentioned on Mermaid&amp;rsquo;s
documentation. Now all are set to their place, so whenever I put Mermaid
syntax in a markdown&amp;rsquo;s code block &lt;code&gt;```&lt;/code&gt; the code will
be transformed to svg image.&lt;/p&gt;

&lt;p&gt;Without further ado, below are a couple of examples of Mermaid diagram
definition and their respective rendered diagram. It&amp;rsquo;s show time!&lt;/p&gt;

&lt;h1 id=&#34;simple-graph:16f5e32215aea0606e9a8f52ebcfb505&#34;&gt;Simple graph&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;%% remove comment to render the graph
graph TB
  subgraph one
    a1--&amp;gt;a2
  end
  subgraph two
    b1--&amp;gt;b2
  end
  subgraph three
    c1--&amp;gt;c2
  end
  c1--&amp;gt;a2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;graph TB
  subgraph one
    a1--&amp;gt;a2
  end
  subgraph two
    b1--&amp;gt;b2
  end
  subgraph three
    c1--&amp;gt;c2
  end
  c1--&amp;gt;a2
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;sequence-diagram:16f5e32215aea0606e9a8f52ebcfb505&#34;&gt;Sequence diagram&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;%% remove comment to render the diagram
sequenceDiagram
  Alice -&amp;gt;&amp;gt; Bob: Hello Bob, how are you?
  Bob--&amp;gt;&amp;gt;John: How about you John?
  Bob--x Alice: I am good thanks!
  Bob-x John: I am good thanks!
  Note right of John: Bob thinks a long&amp;lt;br/&amp;gt;long time, so long&amp;lt;br/&amp;gt;that the text does&amp;lt;br/&amp;gt;not fit on a row.

  Bob--&amp;gt;Alice: Checking with John...
  Alice-&amp;gt;John: Yes... John, how are you?
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;sequenceDiagram
  Alice -&amp;gt;&amp;gt; Bob: Hello Bob, how are you?
  Bob--&amp;gt;&amp;gt;John: How about you John?
  Bob--x Alice: I am good thanks!
  Bob-x John: I am good thanks!
  Note right of John: Bob thinks a long&amp;lt;br/&amp;gt;long time, so long&amp;lt;br/&amp;gt;that the text does&amp;lt;br/&amp;gt;not fit on a row.

  Bob--&amp;gt;Alice: Checking with John...
  Alice-&amp;gt;John: Yes... John, how are you?
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;side-note:16f5e32215aea0606e9a8f52ebcfb505&#34;&gt;Side note&lt;/h2&gt;

&lt;p&gt;The CSS I use to style the diagram can be seen &lt;a href=&#34;https://raw.githubusercontent.com/npatmaja/nauvalatmaja.com/master/src/render/styles/mermaid.less&#34;&gt;here&lt;/a&gt;. Happy diagramming!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blogging with Docpad</title>
      <link>http://nauvalatmaja.com/2014/12/28/blogging-with-docpad/</link>
      <pubDate>Sun, 28 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nauvalatmaja.com/2014/12/28/blogging-with-docpad/</guid>
      <description>&lt;p&gt;It has been a long time since I planned to have a dedicated blog for
writing about some more &lt;em&gt;&amp;ldquo;meaningful&amp;rdquo;&lt;/em&gt; stuff instead of just
my rumbling I posted on my &lt;a href=&#34;http://noval78.wordpress.com&#34;&gt;trash bin&lt;/a&gt;.
After looking out what blogging platforms available, I finally decided
to use &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt;
to host my posts. However, as it uses &lt;a href=&#34;https://github.com/jekyll/jekyll&#34;&gt;Jekyll&lt;/a&gt;
as its engine, many people suggested to install Jekyll in my local machine, which
was a no-show for me. So I tried to built it
manually without installing Jekyll locally, which was proven to be a
hard thing to do. Later, I had to postponed the project
due to some higher priority activities until recent time.&lt;/p&gt;

&lt;!-- Read more --&gt;

&lt;p&gt;As I am now re-learning javascript and node.js, I searched about static
blogging with node.js to pick this blog project up once again, with a resolution
to make it online. And that was how I came accross
&lt;a href=&#34;http://docpad.org&#34;&gt;docpad&lt;/a&gt;, a dinamyc static site generator built
using node.js. Similar to Jekyll, it can render markdown files to
bunch of static htmls. Surprisingly, to build a blog using docpad wasn&amp;rsquo;t hard
thing to do. There were skeletons that you can choose
to bootstrap your blog when you run &lt;code&gt;docpad run&lt;/code&gt; for the first time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nauvalatmaja.com/img/docpad-run-skeleton.png&#34; alt=&#34;docpad skeletons&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After creating the skeleton, next thing that is needed to do is to
customize blog&amp;rsquo;s appearance. Since I am bad at web design, I searched
for blogs built using
docpad whom source hosted on github. Fortunately, I found
&lt;a href=&#34;http://www.ewal.net&#34;&gt;Erv Walter&amp;rsquo;s blog&lt;/a&gt; which satisfied my
requirements for being simple and clean. So I cloned the blog&amp;rsquo;s repository
and adapted it to the skeleton I used and did some minor changes,
and &lt;em&gt;voila&lt;/em&gt; here it is. Lastly, I
used &lt;a href=&#34;https://docpad.org/plugin/ghpages&#34;&gt;GitHub pages plugin&lt;/a&gt;
to &lt;a href=&#34;http://seethroughtrees.github.io/posts/github-pages-with-docpad/&#34;&gt;push the blog to github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>