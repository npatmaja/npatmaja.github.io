<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on nauval atmaja</title>
    <link>http://nauvalatmaja.com/tags/golang/</link>
    <description>Recent content in Golang on nauval atmaja</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Apr 2016 07:40:17 +0700</lastBuildDate>
    <atom:link href="http://nauvalatmaja.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Function Composition in Go</title>
      <link>http://nauvalatmaja.com/2016/04/15/function-composition-in-go/</link>
      <pubDate>Fri, 15 Apr 2016 07:40:17 +0700</pubDate>
      
      <guid>http://nauvalatmaja.com/2016/04/15/function-composition-in-go/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing with functional JavaScript for a while, especially partial
applications and function composition, and I find those concepts are very
helpful in my daily coding practices. At first, if you are short in
&lt;a href=&#34;https://en.wikipedia.org/wiki/Mathematical_logic&#34;&gt;mathematical logic systems&lt;/a&gt; (just like me), making sense
anything functional could be a bit out of hand. Fortunately there are a lot
of reading materials that do a great job explaining the concepts in an easy and
pragmatic way. You could &lt;a href=&#34;https://medium.com/search?q=functional%20javascript&#34;&gt;search those articles in medium&lt;/a&gt;
and/or you would want to read this &lt;a href=&#34;https://leanpub.com/javascript-allonge/read&#34;&gt;book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go, by design is quite different from JavaScript. It is an attempt to combine
the ease of programming of an interpreted, dynamically typed language (e.g., JavaScript) with the efficiency and safety of a statically typed,
compiled language. It also aims to
be modern, with support for networked and multicore computing
(&lt;a href=&#34;https://golang.org/doc/faq#creating_a_new_language&#34;&gt;Go FAQ page&lt;/a&gt;, 2016). However, despite the differences, there are some similarities
between JavaScript and Go, one of them is that they treat
&lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_function&#34;&gt;functions as first class object&lt;/a&gt;,
which means function is an object that can be passed
around as function&amp;rsquo;s arguments or can be returned from other functions,
and yes, function is a type in Go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type fnString func(string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The effect of having first-class functions is that we can write Go in a more functional manner, just similar to JavaScript.
In JavaScript we can easily write a &lt;code&gt;compose&lt;/code&gt; function (function to do
&lt;a href=&#34;https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29&#34;&gt;function composition&lt;/a&gt;) as the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const compose = (a, b) =&amp;gt; (val) =&amp;gt; a(b(val));

// variadic versions
const compose = (...functions) =&amp;gt;
  (value) =&amp;gt; functions.reverse().reduce((acc, fn) =&amp;gt; fn(acc), value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Go, as it is a typed language, and
&lt;a href=&#34;https://golang.org/doc/faq#generics&#34;&gt;it does not support generic type&lt;/a&gt;
per se, first we need to define a type of what the &lt;code&gt;compose&lt;/code&gt; function
will work against.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type fnString func(string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we define &lt;code&gt;fnString&lt;/code&gt; of function type that receives a &lt;code&gt;string&lt;/code&gt;
argument and returns a &lt;code&gt;string&lt;/code&gt;. Next, is to define the &lt;code&gt;compose&lt;/code&gt;
function itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func compose(a fnString, b fnString) fnString {
	return func(s string) string {
		return a(b(s))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;compose&lt;/code&gt; code is pretty straight forward just like the JavaScript
version. The only main difference is that the function has to comply with the
given type, &lt;code&gt;fnString&lt;/code&gt; in the example above. So if we want to compose functions
that work on other than strings, we might need to define the appropriate type and the appropriate &lt;code&gt;compose&lt;/code&gt; function (as Go does not have generic type),
in contrast to the JavaScript version that will work for all type
&amp;mdash;JavaScript is a dynamic programming language after all.&lt;/p&gt;

&lt;p&gt;Then, how about the variadic version? Fortunately, Go supports variadic
arguments so it is easier to port the JavaScript code into Go.
However, Go does not
provide direct translation of JavaScript&amp;rsquo;s &lt;code&gt;Array.reduce&lt;/code&gt; function, the
only way to compose the functions is by iterating through the passed
functions and compose them one into another.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func compose2(a fnString, b fnString) fnString {
	return func(s string) string {
		return a(b(s))
	}
}

func compose(fns ...fnString) fnString {
	return func(s string) string {
		var res fnString
		res = fns[0]
		for i := 1; i &amp;lt; len(fns); i++ {
			res = compose2(res, fns[i])
		}
		return res(s)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As seen in the code, the functions are iterated by using for&lt;/p&gt;

&lt;p&gt;The working example of the above function composition can be seen on
&lt;a href=&#34;http://play.golang.org/p/KUetm5b7zW&#34;&gt;http://play.golang.org/p/KUetm5b7zW&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;sectionsign&#34;
  style=&#34;
    margin:0 auto;
    margin-top: -1rem;
    margin-bottom: 1rem;
    text-align: center;
    letter-spacing: 1em;
    color: #333;
  &#34;&gt;
  &lt;span&gt;***&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;Even though writing Go code in a more functional style is possible, however, Go is not a functional programming language. Hence, I&amp;rsquo;m still not convinced
that writing Go program in a functional manner entirely is a good approach (if that is even possible), but I might be wrong.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving to Hugo</title>
      <link>http://nauvalatmaja.com/2015/12/27/moving-to-hugo/</link>
      <pubDate>Sun, 27 Dec 2015 00:30:28 +0700</pubDate>
      
      <guid>http://nauvalatmaja.com/2015/12/27/moving-to-hugo/</guid>
      <description>

&lt;p&gt;Several weeks ago, my &lt;a href=&#34;http://nauvalatmaja.com/2014/12/28/blogging-with-docpad/&#34;&gt;Docpad&lt;/a&gt; installation got screwed.
There was some errors when I tried to run it. My assumption
was because I just moved to Node.js 5.x, so I tried to upgrade
(or re-install it, maybe) it. Though the errors are gone, it
did not work as it used to be, it failed to build my blog
properly &amp;mdash; or I just forgotten how to use it, that&amp;rsquo;s another
possibility.&lt;/p&gt;

&lt;p&gt;Since I was looking for alternatives, I found &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a
static site generator created by &lt;a href=&#34;http://spf13.com/&#34;&gt;Steve Francia&lt;/a&gt; using
&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. The documentation was comprehensive enough to
get me started. Thanks to Hugo I got this blog up and running
again.&lt;/p&gt;

&lt;p&gt;After digging a bit deeper into Hugo, Compared to Docpad,
Hugo came out on top. The first and foremost deciding factor
to me was speed. Docpad took more than 5 seconds to generate
my blog with just merely 7 posts in it, and (most) sometimes
it took longer than that.
It was quite unpleasant experience when I drafted
a blog post and want to preview it but need to wait that much
and to make it worse I did it quite often, conscious or
un-consciously. Amazingly, Hugo took only around 100ms to generate
my blog, that was 500 time faster, awesome!&lt;/p&gt;

&lt;p&gt;So, if you have the same problem as mine or just want to try new
things, here&amp;rsquo;s my &lt;strong&gt;Hugo How To&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;setup-the-site:c708f69283c7d428e0643535a16e1df4&#34;&gt;Setup the site&lt;/h1&gt;

&lt;h2 id=&#34;install-hugo-and-get-it-running:c708f69283c7d428e0643535a16e1df4&#34;&gt;Install Hugo and get it running&lt;/h2&gt;

&lt;p&gt;Hugo &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;is easy to install&lt;/a&gt;, you can download its
binary or install it via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; like I did
or if you feel a bit adventurous you might want to build it from
source, which might as well quite easy. To get Hugo runs actually
took quite minimal effort. The &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;quickstart&lt;/a&gt; do a really
good job to explain the step by step.&lt;/p&gt;

&lt;p&gt;One more thing I like about Hugo is it provides a better working
structure compared to Docpad. When creating a new site by running
&lt;code&gt;hugo new /path/to/site&lt;/code&gt;, Hugo creates a working skeleton
structure comprises &lt;code&gt;archtypes&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;layouts&lt;/code&gt;,
&lt;code&gt;static&lt;/code&gt; and &lt;code&gt;themes&lt;/code&gt;. Those directories are where we supposed
to put pre-configured &lt;em&gt;front matter&lt;/em&gt;, blog contents (posts),
data, site layouts, static files and themes that we want to use.
The &lt;a href=&#34;https://gohugo.io/overview/source-directory/&#34;&gt;Source Organization&lt;/a&gt;
section elaborates on the directory structure deeper.&lt;/p&gt;

&lt;h2 id=&#34;pick-your-theme-and-make-it-yours:c708f69283c7d428e0643535a16e1df4&#34;&gt;Pick your theme and make it yours&lt;/h2&gt;

&lt;p&gt;Hugo comes up with quite a lot &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;ready to use themes&lt;/a&gt;.
You can try all the themes by simply &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;clone all the themes&lt;/a&gt;
and run &lt;code&gt;hugo server -t &amp;lt;theme-name&amp;gt;&lt;/code&gt;. The command tells Hugo
to load the specified theme and use it to render the site then
runs a HTTP server to serve the generated site. If no directory
given (using &lt;code&gt;-d&lt;/code&gt; option), Hugo generates the site to your
machine&amp;rsquo;s memory when running the &lt;code&gt;hugo server&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If none of the themes up to your liking, then you can
&lt;a href=&#34;https://gohugo.io/themes/customizing/&#34;&gt;customize them&lt;/a&gt;
quite easy. You don&amp;rsquo;t need edit directly the theme you are using,
you only need to override the specific part to your liking
instead. The easiest way to do this is by copying the part that
you want to change from the themes directory to its respective
directory in your site, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp /themes/redlounge/layouts/index.html layouts/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and start modifying it. The way Hugo determines the layout
is to find respective files in &lt;code&gt;layouts&lt;/code&gt; then using defaults
&lt;code&gt;layouts/_defaults&lt;/code&gt; if the desired file can&amp;rsquo;t be found.
The search is then propagated to the used theme &lt;code&gt;themes/used-theme&lt;/code&gt; if the file still not found.&lt;/p&gt;

&lt;p&gt;For this blog, I choose &lt;a href=&#34;https://github.com/tmaiaroto/hugo-redlounge&#34;&gt;hugo-redlounge&lt;/a&gt;
as the base of my blog theme and customized it as you see now. Most of the customizations are related to styles, hence,
I use &lt;a href=&#34;http://sass-lang.com/&#34;&gt;SCSS&lt;/a&gt; to modularize my custom CSS.
I put all the SCSS files in a separate &lt;code&gt;src&lt;/code&gt; directory and only
the resulting CSS is put in the &lt;code&gt;static&lt;/code&gt; directory to be used.
Another way is to clone &lt;a href=&#34;https://github.com/spf13/spf13.com&#34;&gt;Steve Francia&amp;rsquo;s website&lt;/a&gt;, which looks
really awesome and start to customize it as you see fit.&lt;/p&gt;

&lt;h2 id=&#34;migration:c708f69283c7d428e0643535a16e1df4&#34;&gt;Migration&lt;/h2&gt;

&lt;p&gt;Migrating from Docpad to Hugo should be easy assuming the posts
are written in markdown format. In my case, I just needed to copy all posts into &lt;code&gt;content/post&lt;/code&gt;. Copying the markdowns alone should be
enough to make Hugo renders them. However, you might want to
change the posts&amp;rsquo; &lt;a href=&#34;https://gohugo.io/content/front-matter&#34;&gt;front matter&lt;/a&gt;
to adhere Hugo&amp;rsquo;s format. Next is to migrate all the static files
to directory &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;hosting-on-github:c708f69283c7d428e0643535a16e1df4&#34;&gt;Hosting on GitHub&lt;/h1&gt;

&lt;p&gt;There are several ways to deploy generated site to GitHub-Pages.
Using &lt;code&gt;git subtree&lt;/code&gt; is one of them like shown in
&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;this tutorial&lt;/a&gt;.
The cons of this method is that you also keep track the generated
site directory to your working repository. This is a problem for
me as I have quite slow internet connection so I need the
the repository to be as small as possible.&lt;/p&gt;

&lt;p&gt;To solve the problem, I did is similar to what I did
previously to Docpad: make the generated site directory (default
is &lt;code&gt;public&lt;/code&gt;) ignored then clone the existing &lt;a href=&#34;https://pages.github.com/&#34;&gt;gh_pages&lt;/a&gt;
(create one if necessary) to directory &lt;code&gt;public&lt;/code&gt;. When deploying to GitHub, the sequence is: copy &lt;code&gt;public/.git&lt;/code&gt;, &lt;code&gt;public/.gitignore&lt;/code&gt;
somewhere else, generate the site, put back &lt;code&gt;.git&lt;/code&gt; and
&lt;code&gt;.gitignore&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt; then commit and push it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Do this only one time when setting up public dir.
# Assuming you are inside your working directory.
git clone git@github.com:user/user.github.io.git public
echo &amp;quot;public&amp;quot; &amp;gt;&amp;gt; .gitignore

# commit and push your repository
git commit -m &amp;quot;ignore public&amp;quot;
git push origin master

# Deployment sequence
# create temporary directory
mkdir tmp

# copy .git/ to temp
cp -r public/.git tmp/.git
cp public/.gitignore tmp/.gitignore

# clean out directory public and regenerate htmls
rm -rf public

# generate static htmls
hugo -t some_theme

# copy back the git files
cp -r tmp/.git public/.git
cp tmp/.gitignore public/.gitignore

# go to the out folder
pushd public &amp;gt; /dev/null

# create .nojekyll file
# https://github.com/blog/572-bypassing-jekyll-on-github-pages
touch .nojekyll

# add and push to github pages
git add -A
git commit -m &amp;quot;`date`&amp;quot;
git push -f origin master

# change back to root dir
popd &amp;gt; /dev/null

# remove temp directory
rm -rf tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;automation:c708f69283c7d428e0643535a16e1df4&#34;&gt;Automation&lt;/h1&gt;

&lt;p&gt;What I did next is to automate repetitive tasks such as deployment steps above, which is quite lengthy and prone to errors.
For this project
I decided to use &lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34;&gt;GNU&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;Make&lt;/a&gt; as the build tool
&amp;mdash; I used this
&lt;a href=&#34;https://gist.github.com/npatmaja/7f30c79c08cb315466dd#file-deploy&#34;&gt;bash script&lt;/a&gt; when dealing with Docpad previously. But, why Make?
Why not! Make has similar capabilities with other recent build tools
like Cake, Gulp or Grunt. Moreover, my machine has it pre-installed.
Currently, I&amp;rsquo;m still novice in Make, hence my terrible looking  &lt;a href=&#34;https://github.com/npatmaja/nauvalatmaja.com/blob/master/Makefile&#34;&gt;Makefile&lt;/a&gt;. Following this, I plan to use Make at my office
as the build tools of the project I&amp;rsquo;m working on. Hope I can be more
proficient along the time.&lt;/p&gt;

&lt;div class=&#34;sectionsign&#34;
  style=&#34;
    margin:0 auto;
    margin-top: -1rem;
    margin-bottom: 1rem;
    text-align: center;
    letter-spacing: 1em;
    color: #333;
  &#34;&gt;
  &lt;span&gt;***&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;Overall, Hugo is a nice tool to play with. It is very fast, customizable and easy to operate. There are a lot of Hugo&amp;rsquo;s
features that yet to explore, e.g., shortcodes, taxonomies,
scratch, etc. Up to this point, I am a satisfied Hugo&amp;rsquo;s user, but,
we&amp;rsquo;ll see.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>